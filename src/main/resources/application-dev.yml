spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?serverTimezone=Asia/Seoul
    username: kang
    password: passwd123

  jpa:
    open-in-view: true
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl #변수 이름을 그대로 컬럼에 반영.
      use-new-id-generator-mappings: false    # jpa가 사용하는 기본 넘버링 전략을 따라가지 않는다
    show-sql: true
    properties:
      hibernate.format_sql: true

  security:
    oauth2:
      client:
        registration:
          google: # /oauth2/authorization/google 이 주소를 동작하게 한다.
            client-id: 800569042840-0pck39676orsi5jqoialbupbe1qo1tc5.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile

          facebook:
            client-id: 525471382386440
            client-secret: 9664e14fcb571e1dc5c393879df2bf78
            scope:
              - email
              - public_profile

          # 네이버는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
          # 요청주소도 다르고, 응답 데이터도 다르기 때문이다.
          naver:
            client-id: ain8qVoCODDuIRTIienH
            client-secret: _KhKIsNT2M
            scope:
              - name
              - email
            client-name: Naver # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize  #프론트에서 네이버 버튼을 누르면 <a href="/oauth2/authorization/naver">네이버 로그인</a> 이 주소로 요청된다.
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원정보를 json의 response 키값으로 리턴해줌.

  mail:
    host: smtp.gmail.com
    port: 587
    username: kjh83370@gmail.com
    password: test
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  #세션 db 생성
  session:
    store-tpye: jdbc
    jdbc:
      initialize-schema: always